lines(d,y,col=i)
}
return(mpd.mat)
}
# %%% USING LAJA DATASET %%%
data(laja)
data <- comparative.comm(invert.tree, river.sites, invert.traits, river.env)
plot(invert.tree)
# Updating species-site abundance matrix
species.abundances <- round(t(sim.char(invert.tree, 5, model="BM", nsim=10)[,1,]) * 100)
species.abundances[species.abundances < 0] <- 0
colnames(species.abundances) <- invert.tree$tip.label
rownames(species.abundances) <- paste("site_", seq_len(nrow(species.abundances)))
# Generating a vector of delta values from 0.1 to 3
deltas <- seq(0.1,3,by=0.1)
deltas
# Demonstrating function
laja.test <- phy.d.transform(invert.tree, deltas,species.abundances)
library(ape)
library(geiger)
library(phytools)
# Function for appending trees onto the tips of an existing tree.
# The birth, death, and steps arguments all describe the parameters of the simulated trees to be appended to the original tree.
add.branch <- function(tree,birth,death,steps,type=c("pops","seq.err")){
# Set type of branch addition according to argument (this specifies only the letters used for the tips of the appended tree)
type <- match.arg(type)
# Determine number of species present in original tree. Additional trees will be added to each originally present tip.
tips <- Ntip(tree)
# Make copy of original tree. This is in order to keep track of the tip names on the original tree.
orig.tree <- tree
# For each species in original tree,
for(i in 1:tips){
# get name of original tip.
orig.tip <- orig.tree$tip.label[i]
# Generate a new tree to be added onto the tip of the original tree, based on the function arguments specified.
new.tree <- sim.bdtree(b=birth, d=death, stop="time", t=steps)
# Rename tip labels of new tree to be prefixed by tip label on the original tree, where new tree will be bound.
# Get number of tips of new tree.
new.tips <- Ntip(new.tree)
# For each tip in new tree,
for (j in 1:new.tips){
# get the current tip, and reformat its name.
cur.tip <- new.tree$tip.label[j]
# The seq.err flag denotes whether to add a "p" or an "e" to the new tips
# (This is meant to represent either populations or sequencing error being added to the tree, respectively)
if(type=="seq.err"){
cur.tip <- sub("s","e",cur.tip)
} else{
cur.tip <- sub("s","p",cur.tip)
}
new.name <- paste0(orig.tip,"--",cur.tip)
# Add that new name to the tip of the new tree.
new.tree$tip.label[j] <- new.name
}
# Bind newly generated tree to current tip of original tree.
tree <- bind.tree(tree,new.tree,where=1)
# The where argument of this command always equals 1, because every time a new tree is appended to the original,
# the next "open" tip of the original tree (which is where the next new tree will be added) becomes tip number 1.
}
# Drop extinct branches of the tree, such that only extant leaves are shown
tree <- drop.extinct(tree)
return(tree)
}
tree <- sim.bdtree(b=0.1, d=0, stop="time", t=10)
plot(tree, main="Original tree")
intra.tree <- add.branch(tree,birth=0.1,death=0.2,steps=5,type="pops")
plot(intra.tree, main="Population tree")
seq.tree <- add.branch(intra.tree,birth=0.2,death=0.2,steps=3,type="seq.err")
plot(seq.tree, main="Sequencing error tree")
# Simulate a community
DemoCom <- sim.meta.phy.comm(size=10, n.spp=1,timesteps=100, p.migrate = 0.02, env.lam = 10, abund.lam = 4, stoch.lam = 1, p.speciate = 0.06)
#DemoCom <- sim.meta.phy.comm(size=10, n.spp=1,timesteps=50, p.migrate = 0.02, env.lam = 10, abund.lam = 4, stoch.lam = 1, p.speciate = 0.06)
plot(DemoCom$phy)
# Drop extinct species from phylogeny
DemoCom$phy <- drop.extinct(DemoCom$phy)
plot(DemoCom$phy)
# Drop extinct species from community matrix (by removing columns with only 0s in them)
DemoCom$comm <- DemoCom$comm[,apply(DemoCom$comm,2,function(x) !all(x==0))]
# Get site names
sites <- rownames(DemoCom$comm)
# Get species names
species.names <- colnames(DemoCom$comm)
# Add intraspecific difference to simulated community phylogeny
intra.tree <- add.branch(DemoCom$phy,birth=0.1,death=0.1,steps=3,"pops")
plot(intra.tree)
# Drop extinct species from intra.tree (...I could incorporate this into the add.branch function, instead)
intra.tree <- drop.extinct(intra.tree)
plot(intra.tree)
library(geiger)
library(pez)
# Function for capturing mpd values over series of delta transformations
phy.d.transform <- function(phylo,d,abundance.matrix){
# phylo--the phylogenetic tree to be transformed
# d--the matrix of delta values to utilize for the branch length transformation
# abundance.matrix--species-sites abundance matrix, used to calculate mpd values
# -----------------------------------------------------------------------------
# Calculate number of sites from species-site abundance matrix
nsim <- nrow(abundance.matrix)
# Create matrix with which to capture mpd.values vector for every loop iteration
mpd.mat <- matrix(NA, nrow=nsim, ncol=length(d))
colnames(mpd.mat) <- d
rownames(mpd.mat) <- paste("Site",1:nsim,sep="_")
for(i in 1:length(d)){
# Apply phylogenetic transformation to tree
s.phylo <- rescale(phylo, "delta", d[i])
# Create comparative data object
c.data <- comparative.comm(s.phylo, abundance.matrix)
# Calculate mean pairwise distance
mpd.values <- .mpd(c.data, abundance.weighted=TRUE)
# Store calculated mpd values within a matrix
mpd.mat[,i] <- mpd.values
}
# PLOTTING--For each 'site' or simulation, plot the change in mpd versus the increasing values of delta
# Specifying the range values, removing any NAs
ymin <- min(mpd.mat, na.rm=T); ymax <- max(mpd.mat,na.rm=T)
# Plotting the first matrix row (i.e. Site1 values)
plot((mpd.mat[1,1:length(d)]) ~ d, xlab="delta", ylab="MPD Values", ylim=c(ymin,ymax), pch=20)
lines(d, mpd.mat[1,])
# Below loop iterates through length of the matrix, adding connected points onto the plot
for(i in 2:nsim){
points((mpd.mat[i,1:length(d)]) ~ d,col=i, pch=20)
# Capture mpd values for current row of matrix, and connect points
y <- (mpd.mat[i,])
lines(d,y,col=i)
}
return(mpd.mat)
}
# %%% USING LAJA DATASET %%%
data(laja)
data <- comparative.comm(invert.tree, river.sites, invert.traits, river.env)
plot(invert.tree)
# Updating species-site abundance matrix
species.abundances <- round(t(sim.char(invert.tree, 5, model="BM", nsim=10)[,1,]) * 100)
species.abundances[species.abundances < 0] <- 0
colnames(species.abundances) <- invert.tree$tip.label
rownames(species.abundances) <- paste("site_", seq_len(nrow(species.abundances)))
# Generating a vector of delta values from 0.1 to 3
deltas <- seq(0.1,3,by=0.1)
deltas
# Demonstrating function
laja.test <- phy.d.transform(invert.tree, deltas,species.abundances)
library(ape)
library(geiger)
library(phytools)
# Function for appending trees onto the tips of an existing tree.
# The birth, death, and steps arguments all describe the parameters of the simulated trees to be appended to the original tree.
add.branch <- function(tree,birth,death,steps,type=c("pops","seq.err")){
# Set type of branch addition according to argument (this specifies only the letters used for the tips of the appended tree)
type <- match.arg(type)
# Determine number of species present in original tree. Additional trees will be added to each originally present tip.
tips <- Ntip(tree)
# Make copy of original tree. This is in order to keep track of the tip names on the original tree.
orig.tree <- tree
# For each species in original tree,
for(i in 1:tips){
# get name of original tip.
orig.tip <- orig.tree$tip.label[i]
# Generate a new tree to be added onto the tip of the original tree, based on the function arguments specified.
new.tree <- sim.bdtree(b=birth, d=death, stop="time", t=steps)
# Rename tip labels of new tree to be prefixed by tip label on the original tree, where new tree will be bound.
# Get number of tips of new tree.
new.tips <- Ntip(new.tree)
# For each tip in new tree,
for (j in 1:new.tips){
# get the current tip, and reformat its name.
cur.tip <- new.tree$tip.label[j]
# The seq.err flag denotes whether to add a "p" or an "e" to the new tips
# (This is meant to represent either populations or sequencing error being added to the tree, respectively)
if(type=="seq.err"){
cur.tip <- sub("s","e",cur.tip)
} else{
cur.tip <- sub("s","p",cur.tip)
}
new.name <- paste0(orig.tip,"--",cur.tip)
# Add that new name to the tip of the new tree.
new.tree$tip.label[j] <- new.name
}
# Bind newly generated tree to current tip of original tree.
tree <- bind.tree(tree,new.tree,where=1)
# The where argument of this command always equals 1, because every time a new tree is appended to the original,
# the next "open" tip of the original tree (which is where the next new tree will be added) becomes tip number 1.
}
# Drop extinct branches of the tree, such that only extant leaves are shown
tree <- drop.extinct(tree)
return(tree)
}
tree <- sim.bdtree(b=0.1, d=0, stop="time", t=10)
plot(tree, main="Original tree")
intra.tree <- add.branch(tree,birth=0.1,death=0.2,steps=5,type="pops")
plot(intra.tree, main="Population tree")
seq.tree <- add.branch(intra.tree,birth=0.2,death=0.2,steps=3,type="seq.err")
plot(seq.tree, main="Sequencing error tree")
# Function for appending trees onto the tips of an existing tree.
# The birth, death, and steps arguments all describe the parameters of the simulated trees to be appended to the original tree.
add.branch <- function(tree,birth,death,steps,type=c("pops","seq.err")){
# Set type of branch addition according to argument (this specifies only the letters used for the tips of the appended tree)
type <- match.arg(type)
# Determine number of species present in original tree. Additional trees will be added to each originally present tip.
tips <- Ntip(tree)
# Make copy of original tree. This is in order to keep track of the tip names on the original tree.
orig.tree <- tree
# For each species in original tree,
for(i in 1:tips){
# get name of original tip.
orig.tip <- orig.tree$tip.label[i]
# Generate a new tree to be added onto the tip of the original tree, based on the function arguments specified.
new.tree <- sim.bdtree(b=birth, d=death, stop="time", t=steps)
# Rename tip labels of new tree to be prefixed by tip label on the original tree, where new tree will be bound.
# Get number of tips of new tree.
new.tips <- Ntip(new.tree)
# For each tip in new tree,
for (j in 1:new.tips){
# get the current tip, and reformat its name.
cur.tip <- new.tree$tip.label[j]
# The seq.err flag denotes whether to add a "p" or an "e" to the new tips
# (This is meant to represent either populations or sequencing error being added to the tree, respectively)
if(type=="seq.err"){
cur.tip <- sub("s","e",cur.tip)
} else{
cur.tip <- sub("s","p",cur.tip)
}
new.name <- paste0(orig.tip,"--",cur.tip)
# Add that new name to the tip of the new tree.
new.tree$tip.label[j] <- new.name
}
# Bind newly generated tree to current tip of original tree.
tree <- bind.tree(tree,new.tree,where=1)
# The where argument of this command always equals 1, because every time a new tree is appended to the original,
# the next "open" tip of the original tree (which is where the next new tree will be added) becomes tip number 1.
}
# Drop extinct branches of the tree, such that only extant leaves are shown
tree <- drop.extinct(tree)
return(tree)
}
tree <- sim.bdtree(b=0.1, d=0, stop="time", t=10)
# Simulate a community
DemoCom <- sim.meta.phy.comm(size=10, n.spp=1,timesteps=100, p.migrate = 0.02, env.lam = 10, abund.lam = 4, stoch.lam = 1, p.speciate = 0.06)
#DemoCom <- sim.meta.phy.comm(size=10, n.spp=1,timesteps=50, p.migrate = 0.02, env.lam = 10, abund.lam = 4, stoch.lam = 1, p.speciate = 0.06)
plot(DemoCom$phy)
# Drop extinct species from phylogeny
DemoCom$phy <- drop.extinct(DemoCom$phy)
plot(DemoCom$phy)
# Drop extinct species from community matrix (by removing columns with only 0s in them)
DemoCom$comm <- DemoCom$comm[,apply(DemoCom$comm,2,function(x) !all(x==0))]
# Get site names
sites <- rownames(DemoCom$comm)
# Get species names
species.names <- colnames(DemoCom$comm)
# Add intraspecific difference to simulated community phylogeny
intra.tree <- add.branch(DemoCom$phy,birth=0.1,death=0.1,steps=3,"pops")
plot(intra.tree)
# Create an empty matrix for the intra.tree phylogeny
intra.sites <- matrix(nrow=length(sites),ncol=Ntip(intra.tree),dimnames = list(sites,intra.tree$tip.label))
population.names <- colnames(intra.sites)
# For each column in the original matrix
for(i in 1:length(species.names)){
# Get the columns in the intra.matrix that are derived from the "current" column of the original
current.species <- grep(species.names[i],population.names)
# If no existing populations are derived from the "current" column in the original
# (i.e. that species went extinct), then there are no values to copy, and we skip over that column
if(length(current.species) == 0){
next
} else {
# If there's only one remaining population derived from the "current" column in the original,
# that population will receive the species' abundance values
# (This if statement is necessary because of the unintuitive behavior of `sample` for vectors of length 1)
if (length(current.species) == 1){
lucky.population <- current.species
} else {
# If there are multiple populations derived from the "current" column, randomly select one of them
lucky.population <- sample(x=current.species, size=1)
}
}
# The abundance values in the chosen population get the original abundance values
intra.sites[,lucky.population] <-DemoCom$comm[,i]
# Remove the "lucky.population" from the vector of populations of the current species
# (This is to determine which remaining populations get abundances of 0)
current.species <- current.species[!current.species %in% lucky.population]
# The remaining populations get abundance values of 0
intra.sites[,current.species] <- 0
}
# Plotting phylogenetic diversity versus different delta transformations for original simulated community
comm.test <- phy.d.transform(DemoCom$phy, deltas, DemoCom$comm)
# Plotting phylogenetic diversity versus different delta transformations for community with appended populations
intra.test <- phy.d.transform(intra.tree, deltas, intra.sites)
DemoCom$comm
library(geiger)
library(pez)
# Function for capturing mpd values over series of delta transformations
phy.d.transform <- function(phylo,d,abundance.matrix,title){
# phylo--the phylogenetic tree to be transformed
# d--the vector of delta values to utilize for the branch length transformation
# abundance.matrix--species-sites abundance matrix, used to calculate mpd values
# title--title of plot generated (plotting mpd values against increasing delta values)
# -----------------------------------------------------------------------------
# Calculate number of sites from species-site abundance matrix
nsim <- nrow(abundance.matrix)
# Create matrix with which to capture mpd.values vector for every loop iteration
mpd.mat <- matrix(NA, nrow=nsim, ncol=length(d))
colnames(mpd.mat) <- d
rownames(mpd.mat) <- paste("Site",1:nsim,sep="_")
for(i in 1:length(d)){
# Apply phylogenetic transformation to tree
s.phylo <- rescale(phylo, "delta", d[i])
# Create comparative data object
c.data <- comparative.comm(s.phylo, abundance.matrix)
# Calculate mean pairwise distance
mpd.values <- .mpd(c.data, abundance.weighted=TRUE) # This means that abundance data in simulation will effect calculation of mpd...Does this makes sense, given what we're trying to do?
# Store calculated mpd values within a matrix
mpd.mat[,i] <- mpd.values
}
# PLOTTING--For each 'site' or simulation, plot the change in mpd versus the increasing values of delta
# Specifying the range values, removing any NAs
ymin <- min(mpd.mat, na.rm=T); ymax <- max(mpd.mat,na.rm=T)
# Plotting the first matrix row (i.e. Site1 values)
plot((mpd.mat[1,1:length(d)]) ~ d, xlab="delta", ylab="MPD Values", ylim=c(ymin,ymax), pch=20,main=title)
lines(d, mpd.mat[1,])
# Below loop iterates through length of the matrix, adding connected points onto the plot
for(i in 2:nsim){
points((mpd.mat[i,1:length(d)]) ~ d,col=i, pch=20)
# Capture mpd values for current row of matrix, and connect points
y <- (mpd.mat[i,])
lines(d,y,col=i)
}
return(mpd.mat)
}
# %%% USING LAJA DATASET %%%
data(laja)
data <- comparative.comm(invert.tree, river.sites, invert.traits, river.env)
plot(invert.tree)
# Updating species-site abundance matrix
species.abundances <- round(t(sim.char(invert.tree, 5, model="BM", nsim=10)[,1,]) * 100)
species.abundances[species.abundances < 0] <- 0
colnames(species.abundances) <- invert.tree$tip.label
rownames(species.abundances) <- paste("site_", seq_len(nrow(species.abundances)))
# Generating a vector of delta values from 0.1 to 3
deltas <- seq(0.1,3,by=0.1)
deltas
# Demonstrating function
laja.test <- phy.d.transform(invert.tree, deltas,species.abundances,"laja")
library(ape)
help(package=ape)
NEONBeetle <- read.tree("/home/austin/Documents/NEONBeetlePhylogeny/RAxML_result.T11.RUN.1")
plot(NEONBeetle)
plot(NEONBeetle, show.tip.label=F)
?trim
NEONBeetle <- drop.tip(NEONBeetle,tip=c("ISUP208-14","IUP828-14","IUP826-14","IUP827-14","IUP1113-14"))
plot(NEONBeetle)
plot(NEONBeetle, show.tip.label=F)
NEONBeetle <- read.tree("/home/austin/Documents/NEONBeetlePhylogeny/RAxML_result.T11.RUN.1")
Ntip(NEONBeetle)
NEONBeetle <- drop.tip(NEONBeetle,tip=c("ISUP208-14","IUP828-14","IUP826-14","IUP827-14","IUP1113-14"))
Ntip(NEONBeetle)
library(ape)
help(package=ape)
tree <- read.tree("~/Documents/NEONBeetlePhylogeny/RAxML_result.T11.RUN.1")
tree <- drop.tip(tree, c("ISUP208-14", "IUP828-14", "IUP826-14", "IUP827-14", "IUP1113-14"))
tree$tip.label[!grepl("BETN|ISUP|IUP|NEON", tree$tip.label)]
grep("JF887757.1", tree$tip.label, fixed=TRUE)
grep("KU917092.1", tree$tip.label, fixed=TRUE)
grep("KJ965706.1", tree$tip.label, fixed=TRUE)
grep("HQ963000.1", tree$tip.label, fixed=TRUE)
grep("KU918920.1", tree$tip.label, fixed=TRUE)
plot(tree, show.tip.label=F)
tiplabels(tip = c("JF887757.1","KU917092.1","KJ965706.1","HQ963000.1","KU918920.1"), pch = 3, col = "red")
tiplabels(tips = c("JF887757.1","KU917092.1","KJ965706.1","HQ963000.1","KU918920.1"),pch = 20,col = "red",cex=2)
tiplabels(tip = c("JF887757.1","KU917092.1","KJ965706.1","HQ963000.1","KU918920.1"),pch = 20,col = "red",cex=2)
tiplabels(tip = c("JF887757.1","KU917092.1","KJ965706.1","HQ963000.1","KU918920.1"),pch = 20,col = "red",cex=2)
tiplabels(pch=20,col="red", cex=2, tips = c("JF887757.1","KU917092.1","KJ965706.1","HQ963000.1","KU918920.1"))
rm(tree)
library(ape)
help(package=ape)
tree <- read.tree("~/Documents/NEONBeetlePhylogeny/RAxML_result.T11.RUN.1")
tree <- drop.tip(tree, c("ISUP208-14", "IUP828-14", "IUP826-14", "IUP827-14", "IUP1113-14"))
tree$tip.label[!grepl("BETN|ISUP|IUP|NEON", tree$tip.label)]
grep("JF887757.1", tree$tip.label, fixed=TRUE)
grep("KU917092.1", tree$tip.label, fixed=TRUE)
grep("KJ965706.1", tree$tip.label, fixed=TRUE)
grep("HQ963000.1", tree$tip.label, fixed=TRUE)
grep("KU918920.1", tree$tip.label, fixed=TRUE)
plot(tree, show.tip.label=F)
tiplabels(pch=20,col="red", cex=2, tips = c(1134,1667,1668,1669,2075))
?tiplabels
tiplabels(pch=20,col="red", cex=2, tip = c(1134,1667,1668,1669,2075))
plot(tree, show.tip.label=F)
tiplabels(pch=20,col="red", cex=2, tip = c(1134,1667,1668,1669,2075))
library(geiger)
library(pez)
# Function for capturing mpd values over series of delta transformations
phy.d.transform <- function(phylo,d,abundance.matrix,title){
# phylo--the phylogenetic tree to be transformed
# d--the vector of delta values to utilize for the branch length transformation
# abundance.matrix--species-sites abundance matrix, used to calculate mpd values
# title--title of plot generated (plotting mpd values against increasing delta values)
# -----------------------------------------------------------------------------
# Calculate number of sites from species-site abundance matrix
nsim <- nrow(abundance.matrix)
# Create matrix with which to capture mpd.values vector for every loop iteration
mpd.mat <- matrix(NA, nrow=nsim, ncol=length(d))
colnames(mpd.mat) <- d
rownames(mpd.mat) <- paste("Site",1:nsim,sep="_")
for(i in 1:length(d)){
# Apply phylogenetic transformation to tree
s.phylo <- rescale(phylo, "delta", d[i])
# Create comparative data object
c.data <- comparative.comm(s.phylo, abundance.matrix)
# Calculate mean pairwise distance
mpd.values <- .mpd(c.data, abundance.weighted=TRUE) # This means that abundance data in simulation will effect calculation of mpd...Does this makes sense, given what we're trying to do?
# Store calculated mpd values within a matrix
mpd.mat[,i] <- mpd.values
}
# PLOTTING--For each 'site' or simulation, plot the change in mpd versus the increasing values of delta
# Specifying the range values, removing any NAs
ymin <- min(mpd.mat, na.rm=T); ymax <- max(mpd.mat,na.rm=T)
# Plotting the first matrix row (i.e. Site1 values)
plot((mpd.mat[1,1:length(d)]) ~ d, xlab="delta", ylab="MPD Values", ylim=c(ymin,ymax), pch=20,main=title)
lines(d, mpd.mat[1,])
# Below loop iterates through length of the matrix, adding connected points onto the plot
for(i in 2:nsim){
points((mpd.mat[i,1:length(d)]) ~ d,col=i, pch=20)
# Capture mpd values for current row of matrix, and connect points
y <- (mpd.mat[i,])
lines(d,y,col=i)
}
return(mpd.mat)
}
# %%% USING LAJA DATASET %%%
data(laja)
data <- comparative.comm(invert.tree, river.sites, invert.traits, river.env)
plot(invert.tree)
# Updating species-site abundance matrix
species.abundances <- round(t(sim.char(invert.tree, 5, model="BM", nsim=10)[,1,]) * 100)
species.abundances[species.abundances < 0] <- 0
colnames(species.abundances) <- invert.tree$tip.label
rownames(species.abundances) <- paste("site_", seq_len(nrow(species.abundances)))
# Generating a vector of delta values from 0.1 to 3
deltas <- seq(0.1,3,by=0.1)
deltas
# Demonstrating function
laja.test <- phy.d.transform(invert.tree, deltas,species.abundances,"laja")
table <- read.csv("/home/austin/Documents/Wolf Lab/Primula/CratersOfTheMoon/NPSpecies_FullListWithDetails_AdvancedSearch_20190419100651.csv")
view(table)
View(table)
table <- read.csv("/home/austin/Documents/Wolf Lab/Primula/NPSpecies_FullListWithDetails_AdvancedSearch_20190419111949.xlsx")
table <- read.csv("/home/austin/Documents/Wolf Lab/Primula/NPSpecies_FullListWithDetails_AdvancedSearch_20190419111949.csv")
View(table)
library(suppdata)
data<-read.csv(suppdata("10.1371/journal.pone.0166714",2))
str(data)
str(data$Average.Indiv..Leaf.Area)
print(data$Average.Indiv..Leaf.Area)
?write.csv
write.csv(data, file"~/Documents/NATDB/reese.data.csv")
write.csv(data, file="~/Documents/NATDB/reese.data.csv")
library(bold)
install.packages(c("bold", "seqinr", "ape",
"RJSONIO", "stringr", "fields", "parallel",
"caper", "phytools"))
install.packages(c("bold", "seqinr", "ape", "RJSONIO", "stringr", "fields", "parallel", "caper", "phytools"))
library(bold)
library(seqinr)
library(ape)
library(RJSONIO)
library(stringr)
help(package=stringr)
library(fields)
library(parallel)
library(caper)
library(phytools)
# The "geomedb" requires the latest version available on Github, to download it,
# do the following:
install.packages("devtools")
library(devtools)
install_github("biocodellc/fimsR-access")
# Installing regPhylo package
install.packages("~/Documents/regPhylo_testing/regPhylo_1.0.2.tar.gz" , repos=NULL, type="source", dependencies = TRUE)
library(regPhylo)
help(package=regPhylo)
# First we need to load the objects into the R environment.
output="Alignments/OneBest.Geo/MultiAlign"
input="Alignments/OneBest.Geo"
nthread=5
methods = c("mafftfftns2", "mafftfftnsi", "muscle", "prank")
# Run the function,
Multi.Align(input="Alignments/OneBest.Geo", output="Alignments/OneBest.Geo/MultiAlign",
nthread=5, methods = c("mafftfftns2", "mafftfftnsi", "muscle",
"prank"))
library(bold)
library(seqinr)
library(ape)
library(RJSONIO)
library(stringr)
library(fields)
library(parallel)
library(caper)
library(phytools)
install.packages("blogdown")
library(blogdown)
blogdown::serve_site()
pwd()
setwd("/home/austin/website")
getwd()
blogdown::serve_site()
getwd()
setwd("/home/austin/website/akoontz11.github.io/")
library(blogdown)
blogdown::build_site()
blogdown::build_site()
getwd()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
